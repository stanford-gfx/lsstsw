#!/bin/bash
#
#  Deploy a standardized, standalone, lsst-build sandbox
#

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
source ${SCRIPT_DIR}/../etc/settings.cfg.sh

EUPS_VERSION=${EUPS_VERSION:-1.5.9}         # Version of EUPS to install
ANACONDA_VERSION=${ANACONDA_VERSION:-2.2.0} # Version of Anaconda to install
GIT_VERSION=${GIT_VERSION:-2.2.2}           # Version of git to install

set -e

mkdir -p ${LSSTSW}/{sources,build,var/run,var/log,lfs,distserver/production}

export PATH="$LSSTSW/anaconda/bin:$PATH"
export PATH="$LSSTSW/lfs/bin:$PATH"
export PATH="$LSSTSW/bin:$PATH"

export CURL=/usr/bin/curl

cd $LSSTSW

test -f "$LSSTSW/anaconda/.deployed" || ( # Anaconda
    cd sources
    case $(uname -s) in
        Linux*)  ana_platform="Linux-x86_64" ;;
        Darwin*) ana_platform="MacOSX-x86_64" ;;
        *)
            echo "Cannot install anaconda: unsupported platform $(uname -s)"
            exit 1
            ;;
    esac

    ana_file_name="Anaconda-${ANACONDA_VERSION}-${ana_platform}.sh"
    echo "::: Deploying Anaconda ${ANACONDA_VERSION} for ${ana_platform}"
    ${CURL} -# -L -O http://repo.continuum.io/archive/${ana_file_name}
    bash ${ana_file_name} -b -p "$LSSTSW/anaconda"

    touch "$LSSTSW/anaconda/.deployed"

    if [[ $(uname -s) = Darwin* ]]; then
        #run install_name_tool on all of the libpythonX.X.dylib dynamic
        #libraries in anaconda
        for entry in $LSSTSW/anaconda/lib/libpython*.dylib
            do
                install_name_tool -id $entry $entry
            done
    fi
)

test -f "$LSSTSW/lfs/.git.deployed" || ( # git
    echo "::: Deploying git"
    cd sources
    GIT_BASE_URL="https://www.kernel.org/pub/software/scm/git"
    ${CURL} -# -L -O ${GIT_BASE_URL}/git-${GIT_VERSION}.tar.gz
    ${CURL} -# -L -O ${GIT_BASE_URL}/git-manpages-${GIT_VERSION}.tar.gz
    tar xzf git-${GIT_VERSION}.tar.gz
    cd git-${GIT_VERSION}
    ./configure --prefix="$LSSTSW/lfs"
    make -j4
    make install
    cd "$LSSTSW/lfs/share/man"
    tar xzf "$LSSTSW/sources/git-manpages-${GIT_VERSION}.tar.gz"
    (cd "$LSSTSW" && git config push.default current)
    touch "$LSSTSW/lfs/.git.deployed"
)

# backwards compatibility if EUPS wasn't installed to a versioned directory
test -f "$LSSTSW/eups/.deployed" && ( # EUPS
    echo "::: Moving old EUPS to eups/legacy"
    mv "$LSSTSW/eups" "$LSSTSW/eups-tmp"
    mkdir -p "$LSSTSW/eups"
    mv "$LSSTSW/eups-tmp" "$LSSTSW/eups/legacy"
    ln -s legacy "$LSSTSW/eups/current"
)

test -f "$LSSTSW/eups/$EUPS_VERSION/.deployed" || ( # EUPS
    echo "::: Deploying eups $EUPS_VERSION"
    if [[ -e "$LSSTSW/eups/$EUPS_VERSION" ]]; then
        chmod -R +w "$LSSTSW/eups/$EUPS_VERSION"
        rm -rf "$LSSTSW/eups/$EUPS_VERSION"
    fi

    cd sources
    ${CURL} -# -L -o eups-$EUPS_VERSION.tar.gz https://github.com/RobertLuptonTheGood/eups/archive/$EUPS_VERSION.tar.gz
    tar xzf eups-$EUPS_VERSION.tar.gz
    cd eups-$EUPS_VERSION
    ./configure --prefix="$LSSTSW/eups/$EUPS_VERSION" --with-python="$LSSTSW/anaconda/bin/python" --with-eups="$LSSTSW/stack"
    make
    make install
    touch "$LSSTSW/eups/$EUPS_VERSION/.deployed"
)

if [[ "$(readlink $LSSTSW/eups/current)" != "$EUPS_VERSION" ]]; then
    echo "::: Making eups $EUPS_VERSION the default"
    rm -f "$LSSTSW/eups/current"
    ln -s "$EUPS_VERSION" "$LSSTSW/eups/current"
fi

test -f "$LSSTSW/stack/.deployed" || ( # Adjust the stack config
    echo "::: Deploying manifest.remap"
    cd stack/site
    ln -sf ../../etc/manifest.remap
    touch "$LSSTSW/stack/.deployed"
)

test -f "$LSSTSW/versiondb/.deployed" || ( # Clone the version database
    echo "::: Deploying versiondb"
    rm -rf versiondb
    if [ -z ${NO_PUSH+x} ]; then
        git clone https://github.com/lsst/versiondb.git
    else
        git clone git@github.com:lsst/versiondb.git
        (cd versiondb && git config push.default current)
    fi
    touch "$LSSTSW/versiondb/.deployed"
)

test -f "$LSSTSW/lsst_build/.deployed" || ( # Clone lsst_build
    echo "::: Deploying lsst_build"
    rm -rf lsst_build
    git clone https://github.com/lsst/lsst_build.git
    (cd lsst_build && git config push.default current)
    touch "$LSSTSW/lsst_build/.deployed"
)

test -f "${LSSTSW}/lfs/bin/numdiff" || (
    echo "::: Deploying numdiff"
    cd ${LSSTSW}/sources
    ${CURL} -# -L -O http://download-mirror.savannah.gnu.org/releases//numdiff/numdiff-5.8.1.tar.gz
    tar -xzf numdiff-5.8.1.tar.gz
    cd numdiff-5.8.1
    ./configure --prefix=${LSSTSW}/lfs --disable-nls
    make -j4
    make install
)

cat <<EOF

Done. Run the following:

    . $LSSTSW/bin/setup.sh

to begin using it.

EOF
